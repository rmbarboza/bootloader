     1                                  [bits 16]
     2                                  
     3                                  [org 0x7c00]
     4                                  
     5                                  LOAD_SEGMENT equ 0x1000
     6                                  disk_retries equ 4
     7                                  
     8                                  main:
     9 00000000 EB38                    	jmp short start
    10 00000002 90                      	nop
    11                                  
    12                                  %include "bootsector.S"
     1                              <1> bootsector:
     2 00000003 4465764F53202020    <1> 	iOEM 	   db "DevOS   "	; OEM String
     3 0000000B 0002                <1> 	iSectSize  dw 0x200		; bytes per sector
     4 0000000D 01                  <1>  	iClustSize db  1             	; sectors per cluster
     5 0000000E 0100                <1> 	iResSect   dw  1             	; #of reserved sectors
     6 00000010 02                  <1> 	iFatCnt	   db  2 		; #of FAT copies
     7 00000011 E000                <1> 	iRootSize  dw  224 		; size of root directory
     8 00000013 400B                <1> 	iTotalSect dw  2880 		; total # of sectors if over 32 MB
     9 00000015 F0                  <1> 	iMedia	   db  0xF0 		; media Descriptor
    10 00000016 0900                <1> 	iFatSize   dw  9 		; size of each FAT
    11 00000018 0900                <1> 	iTrackSect dw  9 		; sectors per track
    12 0000001A 0200                <1> 	iHeadCnt   dw  2 		; number of read-write heads
    13 0000001C 0000                <1> 	iHiddenSect dw 0 		; number of hidden sectors
    14 0000001E 0000                <1> 	iSect32    dw  0 		; # sectors for over 32 MB
    15 00000020 00                  <1> 	iBootDrive db  0 		; holds drive that the boot sector came from
    16 00000021 00                  <1> 	iReserved  db  0 		; reserved, empty
    17 00000022 29                  <1> 	iBootSign  db  0x29 		; extended boot sector signature
    18 00000023 73657269            <1> 	iVolID     db  "seri" 		; disk serial
    19 00000027 4D59564F4C554D4520- <1> 	acVolumeLabel db "MYVOLUME   " 	; volume label
    19 00000030 2020                <1>
    20 00000032 4641543136202020    <1> 	acFSType   db "FAT16   " 	; file system type
    21                              <1> 
    13                                  
    14                                  start:
    15                                  	; Setup segments:
    16 0000003A FA                      	cli
    17 0000003B 8816[2000]              	mov  [iBootDrive], dl  ; save what drive we booted from (should be 0x0)
    18 0000003F 8CC8                    	mov  ax, cs          ; CS = 0x0, since that's where boot sector is (0x07c00)
    19 00000041 8ED8                    	mov  ds, ax          ; DS = CS = 0x0
    20 00000043 8EC0                    	mov  es, ax          ; ES = CS = 0x0
    21 00000045 8ED0                    	mov  ss, ax          ; SS = CS = 0x0
    22 00000047 BC0090                  	mov  sp, 0x9000      ; Stack grows down from offset 0x9000, way beyond 0x7C00.
    23 0000004A FB                      	sti  
    24                                  
    25                                  	; Display "loading" message:
    26 0000004B 8D36[E000]              	lea  si, [loadmsg]
    27 0000004F E84600                  	call WriteString
    28                                  
    29                                  	; Reset disk system.
    30                                  	; Jump to bootFailure on error.
    31 00000052 8A16[2000]              	mov  dl, [iBootDrive]  ; drive to reset
    32 00000056 31C0                    	xor  ax, ax          ; subfunction 0
    33 00000058 CD13                    	int  0x13            ; call interrupt 13h
    34 0000005A 7228                    	jc   bootFailure     ; display error message if carry set (error)  
    35                                  
    36                                  	; Here stage2 is not reachable. Remember that BIOS only loads the first sector of the bootloader.
    37                                  	; So we nead to read data from disk to memory
    38                                  	;call stage2
    39                                  
    40                                  	;mov bx,0x7E00
    41                                  	;mov edx,0x1
    42                                  	;call readOneSec
    43                                  
    44 0000005C BB007E                  	mov bx,0x7E00
    45 0000005F B80100                  	mov ax,1
    46 00000062 E84200                  	call ReadSector
    47                                  
    48 00000065 8B1E[0002]              	mov bx,[stage2_magic]
    49 00000069 81FBCDAB                	cmp bx,stage2_signature ; compare the signature
    50 0000006D 751F                    	jne Stage2Failure
    51                                  
    52 0000006F EA[0202]0000            	jmp 0:stage2 
    53                                  
    54                                  Reboot:
    55 00000074 8D36[FB00]              	lea si, [rebootmsg] ; Load address of reboot message into si
    56 00000078 E81D00                  	call WriteString  ; print the string
    57 0000007B 31C0                    	xor ax, ax        ; subfuction 0
    58 0000007D CD16                    	int 0x16          ; call bios to wait for key
    59 0000007F EA                      	db 0xEA          ; machine language to jump to FFFF:0000 (reboot)
    60 00000080 0000                    	dw 0x0000
    61 00000082 FFFF                    	dw 0xFFFF
    62                                  
    63                                  bootFailure:
    64 00000084 8D36[EE00]              	lea  si, [diskerror]
    65 00000088 E80D00                  	call WriteString
    66 0000008B E8E6FF                  	call Reboot
    67                                  
    68                                  Stage2Failure:
    69 0000008E 8D36[1401]              	lea  si, [stage2failure]
    70 00000092 E80300                  	call WriteString
    71 00000095 E8DCFF                  	call Reboot
    72                                  
    73                                  %include "print_message.S"
     1                              <1> ;INPUT DS:SI
     2                              <1> ;Print char until 0 is found
     3                              <1> WriteString:
     4 00000098 AC                  <1> 	lodsb	 		; load byte at ds:si into al (advancing si)
     5 00000099 08C0                <1> 	or al,al 		; test if character is 0 (end)
     6 0000009B 7409                <1> 	jz WriteString_done 	; jump to end if 0.
     7 0000009D B40E                <1> 	mov ah, 0xe		; Subfunction 0xe of int 10h (video teletype output)
     8 0000009F BB0900              <1> 	mov bx, 9		; Set bh (page nr) to 0, and bl (attribute) to white (9)
     9 000000A2 CD10                <1> 	int 0x10		; call BIOS interrupt.
    10                              <1> 
    11 000000A4 EBF2                <1> 	jmp WriteString 	; Repeat for next character.
    12                              <1> 
    13                              <1> WriteString_done:
    14 000000A6 C3                  <1> 	retw
    15                              <1> 
    74                                  %include "disk.S"
     1                              <1> ; Read sector with logical address (LBA) AX into data
     2                              <1> ; buffer at ES:BX. 
     3                              <1> ; This function uses interrupt 13h, subfunction ah=2.
     4                              <1> ReadSector:
     5 000000A7 31C9                <1> 	xor     cx, cx                      ; Set try count = 0
     6                              <1> 
     7                              <1> readsect:
     8 000000A9 50                  <1> 	push    ax                          ; Store logical block
     9 000000AA 51                  <1> 	push    cx                          ; Store try number
    10 000000AB 53                  <1> 	push    bx                          ; Store data buffer offset
    11                              <1> 	; Calculate cylinder, head and sector:
    12                              <1> 	; Cylinder = (LBA / SectorsPerTrack) / NumHeads
    13                              <1> 	; Sector   = (LBA mod SectorsPerTrack) + 1
    14                              <1> 	; Head     = (LBA / SectorsPerTrack) mod NumHeads
    15 000000AC 8B1E[1800]          <1> 	mov     bx, [iTrackSect]            ; Get sectors per track
    16 000000B0 31D2                <1> 	xor     dx, dx
    17 000000B2 F7F3                <1> 	div     bx                          ; Divide (dx:ax/bx to ax,dx)
    18                              <1> 	; Quotient (ax) =  LBA / SectorsPerTrack
    19                              <1> 	; Remainder (dx) = LBA mod SectorsPerTrack
    20 000000B4 42                  <1> 	inc     dx                          ; Add 1 to remainder, since sector
    21 000000B5 88D1                <1> 	mov     cl, dl                      ; Store result in cl for int 13h call.
    22                              <1> 
    23 000000B7 8B1E[1A00]          <1> 	mov     bx, [iHeadCnt]              ; Get number of heads
    24 000000BB 31D2                <1> 	xor     dx, dx
    25 000000BD F7F3                <1> 	div     bx                          ; Divide (dx:ax/bx to ax,dx)
    26                              <1> 	; Quotient (ax) = Cylinder
    27                              <1> 	; Remainder (dx) = head
    28 000000BF 88C5                <1> 	mov     ch, al                      ; ch = cylinder                      
    29 000000C1 86D6                <1> 	xchg    dl, dh                      ; dh = head number
    30                              <1> 	; Call interrupt 0x13, subfunction 2 to actually
    31                              <1> 	; read the sector.
    32                              <1> 	; al = number of sectors
    33                              <1> 	; ah = subfunction 2
    34                              <1> 	; cx = sector number
    35                              <1> 	; dh = head number
    36                              <1> 	; dl = drive number
    37                              <1> 	; es:bx = data buffer
    38                              <1> 	; If it fails, the carry flag will be set.
    39 000000C3 B80102              <1> 	mov     ax, 0x0201                  ; Subfunction 2, read 1 sector
    40 000000C6 8A16[2000]          <1> 	mov     dl, [iBootDrive]            ; from this drive
    41 000000CA 5B                  <1> 	pop     bx                          ; Restore data buffer offset.
    42 000000CB CD13                <1> 	int     0x13
    43 000000CD 7203                <1> 	jc      readfail
    44                              <1> 
    45                              <1> 	; On success, return to caller.
    46 000000CF 59                  <1> 	pop     cx                          ; Discard try number
    47 000000D0 58                  <1> 	pop     ax                          ; Get logical block from stack
    48 000000D1 C3                  <1> 	ret
    49                              <1> 
    50                              <1> 	; The read has failed.
    51                              <1> 	; We will retry four times total, then jump to boot failure.
    52                              <1> readfail:   
    53 000000D2 59                  <1> 	pop     cx                      ; Get try number             
    54 000000D3 41                  <1> 	inc     cx                      ; Next try
    55 000000D4 83F904              <1> 	cmp     cx, 4              	; Stop at 4 tries
    56 000000D7 74AB                <1> 	je      bootFailure
    57                              <1> 
    58                              <1> 	; Reset the disk system:
    59 000000D9 31C0                <1> 	xor     ax, ax
    60 000000DB CD13                <1> 	int     0x13
    61                              <1> 
    62                              <1> 	; Get logical block from stack and retry.
    63 000000DD 58                  <1> 	pop     ax
    64 000000DE EBC9                <1> 	jmp     readsect
    75                                  
    76                                  ; PROGRAM DATA
    77 000000E0 4C6F6164696E67204F-     loadmsg db "Loading OS...",0
    77 000000E9 532E2E2E00         
    78 000000EE 4469736B206572726F-     diskerror db "Disk error. ",0
    78 000000F7 722E2000           
    79 000000FB 507265737320616E79-     rebootmsg db "Press any key to reboot.",0
    79 00000104 206B657920746F2072-
    79 0000010D 65626F6F742E00     
    80 00000114 4661696C656420746F-     stage2failure db "Failed to load stage 2.",0
    80 0000011D 206C6F616420737461-
    80 00000126 676520322E00       
    81                                  
    82 0000012C 00<rept>                times 510-($-$$) db 0 	; Pad with nulls up to 510 bytes (excl. boot magic)
    83 000001FE 55AA                    dw 0xAA55     		; magic word for BIOS
    84                                  
    85                                  stage2_signature equ 0xabcd
    86                                  
    87                                  stage2_magic:
    88 00000200 CDAB                    	dw stage2_signature
    89                                  
    90                                  stage2:
    91 00000202 8D36[0C02]              	lea si,[Welcome2Stage]
    92 00000206 E88FFE                  	call WriteString
    93 00000209 E868FE                  	call Reboot
    94                                  
    95 0000020C 57656C636F6D652074-     Welcome2Stage db "Welcome to 2 stage...",0
    95 00000215 6F2032207374616765-
    95 0000021E 2E2E2E00           
    96                                  
    97 00000222 00<rept>                times 512 db 0 	; Pad with nulls up to 512 bytes 
    98 00000422 00<rept>                times 512 db 0 	; Pad with nulls up to 512 bytes 
    99 00000622 00<rept>                times 512 db 0 	; Pad with nulls up to 512 bytes 
   100 00000822 00<rept>                times 512 db 0 	; Pad with nulls up to 512 bytes 
